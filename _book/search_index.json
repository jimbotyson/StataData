[["some-using-stata-basics.html", "4 Some using Stata basics 4.1 Folders 4.2 The do file 4.3 Initiating your data wrangling script 4.4 Dataset 4.5 Exercise", " 4 Some using Stata basics 4.1 Folders I assume that you have a folder structure like Project Folder ├── raw data ├── scripts │ ├── cleanmydata.do │ └── modelmydata.do ├── documentation │ ├── PDFs │ └── Word_docs └──graphs Of course, other folder set-ups are possible, so be aware of your own as you follow the rest of this guide. I assume that the path to your project is c:\\users\\jt\\Documents\\Projects\\StataWrangling 4.2 The do file Let’s start off by creating a new do file: doedit newdo.do Clear everything to make sure there’s nothing leftover in our environment clear all 4.3 Initiating your data wrangling script In a new data wrangling script you should - start a log; - make sure you are in the correct project directory; - clear working memory. So in your new do file add these lines: capture log close log using &quot;MainProjectName $S_DATE.log&quot;, append or cmdlog using &quot;CommandsProjectName $S_DATE.log&quot;, append to log commands only and not output. Next you should make sure you are in the correct directory. Normally for a data wrangling script, this will be the raw data directory for the project. cd c:\\users\\jt\\Documents\\Projects\\StataWrangling\\raw data\\ and then the line clear all to start with a clear workspace. 4.4 Dataset We’re using a dataset of examination results from thirty school students. These data are in in csv format: comma seperated values. Each case or observation is a row with variables in rows seperated by commas. Read the main data file: use https://www.ucl.ac.uk/~ccaajim/results When you first read a datafile, you should always describe the data; check the codebook. You can do this for the complete set of variable s for simple cases, but you may wish to be selective when you have a lot of variables. 4.4.1 Data Types The examination data is quite simple. In your do file add describe codebook This produces ### Interpretation of describe output This output shows first how many observations there are in your data and how many variables. The table that follows includes some detail about each variable: Storage type There are two basic data types in Stata: numeric and string data. String data has two subtypes: strL (L for long) variables can store phenominal amounts of character data (2 billion) and str# (where # is a number) and have a limit on length of 2045 characters. Numeric data is of one of five types: type precision range byte integer -127 to 100 int integer -32,767 and 32,740 long integer -2,147,483,647 and 2,147,483,620 float real 8 digits of accuracy double real 16 digits of accuracy Format types are associated with variables - each has a default, which determines how values are displayed, so that regardless of the precision of the type, the number of decimal places and the width in number of characters to be displayed can be fixed. So a format type %9.0g is a left justified number of maximum 9 characters in width and with specific decimal precision (although in this case zero means ’just as many as can be displayed for this width). 4.4.2 Interpretation of codebook The result of codebook shows you the data type of the variables; the range and the numeric unit of measure; the number of unique values in the data; the number of values missing; the mean value for continuous variables; the standard deviation; the percentile values for the 10%, 25%, 50%, 75%, 90% points. The value of output from codebook is enhanced if you have taken care to label variables and values. 4.5 Exercise What are the types and formats of the variables maths, english, history? Why is maths different? "],["selecting-variables-in-operations.html", "5 Selecting variables in operations 5.1 Exercise 5.2 The uses of _all", " 5 Selecting variables in operations We will use the command list which displays rows of variable values to illustrate the selection of variables. With most commands, variables can be included in the varlist that follows a command name. So on the command line we can type list maths english history which displays all the values for those three variables. Much of the time this is the only selection of variables you need. But, there are times when you wish to select a subset of variables for manipulation perhaps for a series of operations. In this case we can use preserve and restore. The command preserve takes a snapshot of a data set. If we then manipulate or modify the data, we can return to the snapshot state with the command restore. You can use drop varlist to remove variables from the workspace or keep varlist to specify variables to be kept in the workspace. 5.1 Exercise Add the following lines to your script keep maths english history summarize _all What is the effect of these lines. 5.2 The uses of _all Stata has a built in macro (Stata speak for a script variable) named **_all** that contains all the variable names currently in memory. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
